name: dotproj
services:
  migration:
    build:
      context: ./portal/
      dockerfile: Dockerfile
    command: ["python", "manage.py", "migrate"]
    environment:
      - DJANGO_SETTINGS_MODULE=portal.settings
      - POSTGRES_HOST=postgres
      - TIME_ZONE=America/Sao_Paulo
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./portal:/app

  server:
    build:
      context: ./portal/
      dockerfile: Dockerfile
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "portal.wsgi:application"]
    environment:
      - DJANGO_SETTINGS_MODULE=portal.settings
      - POSTGRES_HOST=postgres
      - MINIO_ENDPOINT=http://minio:9000
      - TIME_ZONE=America/Sao_Paulo
    env_file:
      - .env
    ports:
      - "8081:8000"
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./portal:/app

  postgres:
    image: postgres:17-alpine
    environment:
      PGUSER: postgres
      POSTGRES_DB: dotproj
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "postgres"]
      interval: '10s'
      timeout: '30s'
      retries: 5
      start_period: '20s'

  minio:
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port (optional, for admin UI)
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=miniosecret
    volumes:
      - ./minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7.2-alpine
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  redis_data:
    driver: local
